<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>jakartaee9-starter-boilerplate</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>
    <name>jakartaee9-starter-boilerplate</name>
    <description>A Jakarta EE starter project boilerplate for Jakarta EE 9</description>

    <properties>
        <!-- Global Maven settings -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!--Glassfish v6.1+, Java 11 is supported -->
        <maven.compiler.release>11</maven.compiler.release>

        <!--Glassfish v6.0.x requires Java 8-->
        <!--NOTE:The `maven.compiler.release` property is not available when using Java 8-->
        <!--
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        -->

        <!-- The default value is changed to `false` since maven-war-plugin 3.0.0 -->
        <failOnMissingWebXml>false</failOnMissingWebXml>

        <!-- Official Maven Plugins -->
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <maven-war-plugin.version>3.3.2</maven-war-plugin.version>
        <maven-dependency-plugin.version>3.2.0</maven-dependency-plugin.version>
        <maven-surefire-plugin.version>3.0.0-M5</maven-surefire-plugin.version>
        <maven-failsafe-plugin.version>3.0.0-M5</maven-failsafe-plugin.version>
        <maven-surefire-report-plugin.version>3.0.0-M5</maven-surefire-report-plugin.version>

        <!-- Cargo maven plugin to deploy apps to Glassfish/Payara servers -->
        <cargo-maven3-plugin.version>1.9.7</cargo-maven3-plugin.version>

        <!-- Jakarta EE API 9.1.0 adds Java 11 support-->
        <jakartaee-api.version>9.1.0</jakartaee-api.version>

        <!-- Arquillian 1.7.0 adds Jakarta EE 9 and JUnit 5 support-->
        <arquillian-bom.version>1.7.0.Alpha10</arquillian-bom.version>
        <junit-jupiter.version>5.8.1</junit-jupiter.version>

        <!-- Test Utilities -->
        <mockito.version>4.0.0</mockito.version>
        <json-path.version>2.6.0</json-path.version>
        <awaitility.version>4.1.0</awaitility.version>
        <hamcrest.version>2.2</hamcrest.version>
        <jsonassert.version>1.5.0</jsonassert.version>
        <assertj.version>3.21.0</assertj.version>

        <!-- Jacoco code coverage report -->
        <jacoco-maven-plugin.version>0.8.7</jacoco-maven-plugin.version>

        <!-- Glassfish server -->
        <glassfish.version>6.2.2</glassfish.version>
        <arquillian-glassfish6.version>1.0.0.Alpha1</arquillian-glassfish6.version>
        <jersey.version>3.0.3</jersey.version>

        <!-- Payara server -->
        <payara.version>6.2021.1.Alpha1</payara.version>
        <arquillian-payara.version>3.0.alpha1</arquillian-payara.version>

        <!-- Wildfly server -->
        <wildfly.version>25.0.0.Final</wildfly.version>
        <wildfly-maven-plugin.version>2.1.0.Beta1</wildfly-maven-plugin.version>
        <wildfly-arquillian.version>5.0.0.Alpha1</wildfly-arquillian.version>
        <wildfly-jar-maven-plugin.version>6.0.0.Final</wildfly-jar-maven-plugin.version>
        <openshift-maven-plugin.version>1.4.0</openshift-maven-plugin.version>
        <!-- websockets-jsr and resteasy for client, aligned with Wildfly version. -->
        <undertow-websockets-jsr.version>2.2.5.Final</undertow-websockets-jsr.version>
        <resteasy.version>3.15.1.Final</resteasy.version>

        <!-- OpenLiberty server -->
        <!-- since 21.0.0.11-beta, use jakartaee-9.1 instead of 9.0, 
             see: https://github.com/OpenLiberty/open-liberty/issues/18822#issuecomment-932164174 
         -->       
        <liberty.runtime.version>21.0.0.11-beta</liberty.runtime.version>
        <!-- WARNING: 10.15.x.x does not work with openliberty 20.0.0.1 -->
        <derby.version>10.14.2.0</derby.version>
        <liberty-maven-plugin.version>3.4</liberty-maven-plugin.version>
        <!-- Jakarta EE 9 support see: https://github.com/OpenLiberty/liberty-arquillian/issues/71 -->
        <arquillian-liberty-jakarta.version>2.0.0</arquillian-liberty-jakarta.version>
        <!-- OpenLiberty Jakarta 9 preview uses JBoss Resteasy as the Jaxrs provider. -->
        <!-- <cxf.version>3.3.5</cxf.version> -->

        <!-- TODO: Apache Tomee -->
        <tomee.version>9.0.0-M7</tomee.version>
        <tomee-maven-plugin.version>8.0.8</tomee-maven-plugin.version>

        <!-- Weld embedded-->
        <arquillian-weld-embedded.version>3.0.0.Final</arquillian-weld-embedded.version>
        <weld.version>4.0.2.Final</weld.version>

        <!-- By default, skip tests -->
        <skip.unit.tests>true</skip.unit.tests>
        <skip.integration.tests>true</skip.integration.tests>

    </properties>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>jakarta.platform</groupId>
                <artifactId>jakarta.jakartaee-api</artifactId>
                <version>${jakartaee-api.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.jboss.arquillian</groupId>
                <artifactId>arquillian-bom</artifactId>
                <version>${arquillian-bom.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>${junit-jupiter.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.hamcrest/hamcrest -->
            <dependency>
                <groupId>org.hamcrest</groupId>
                <artifactId>hamcrest</artifactId>
                <version>${hamcrest.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.skyscreamer</groupId>
                <artifactId>jsonassert</artifactId>
                <version>${jsonassert.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- https://mvnrepository.com/artifact/org.assertj/assertj-core -->
            <dependency>
                <groupId>org.assertj</groupId>
                <artifactId>assertj-core</artifactId>
                <version>${assertj.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- https://mvnrepository.com/artifact/org.awaitility/awaitility -->
            <dependency>
                <groupId>org.awaitility</groupId>
                <artifactId>awaitility</artifactId>
                <version>${awaitility.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- JSON path -->
            <!-- https://mvnrepository.com/artifact/com.jayway.jsonpath/json-path -->
            <dependency>
                <groupId>com.jayway.jsonpath</groupId>
                <artifactId>json-path</artifactId>
                <version>${json-path.version}</version>
                <scope>test</scope>
            </dependency>
            <!-- https://mvnrepository.com/artifact/com.jayway.jsonpath/json-path-assert -->
            <dependency>
                <groupId>com.jayway.jsonpath</groupId>
                <artifactId>json-path-assert</artifactId>
                <version>${json-path.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- Mockito -->
            <!-- https://mvnrepository.com/artifact/org.mockito/mockito-core -->
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-core</artifactId>
                <version>${mockito.version}</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit5</groupId>
            <artifactId>arquillian-junit5-container</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- see: https://github.com/arquillian/arquillian-core/issues/248 -->
        <!-- and https://github.com/arquillian/arquillian-core/pull/246/files -->
        <dependency>
            <groupId>org.jboss.arquillian.protocol</groupId>
            <artifactId>arquillian-protocol-servlet-jakarta</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <!--        <dependency>
                    <groupId>org.junit.jupiter</groupId>
                    <artifactId>junit-jupiter-params</artifactId>
                    <scope>test</scope>
                </dependency>-->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>
        <!--<dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
        </dependency>
        <dependency>
            <groupId>org.skyscreamer</groupId>
            <artifactId>jsonassert</artifactId>
        </dependency>
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
        </dependency>
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path-assert</artifactId>
        </dependency>-->
    </dependencies>
    <build>
        <finalName>${project.artifactId}</finalName>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.codehaus.cargo</groupId>
                    <artifactId>cargo-maven3-plugin</artifactId>
                    <version>${cargo-maven3-plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${maven-war-plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <skipTests>${skip.unit.tests}</skipTests>
                </configuration>
                <executions>
                    <execution>
                        <id>default-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <excludes>
                                <exclude>**/it/**</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven-failsafe-plugin.version}</version>
                <configuration>
                    <skipITs>${skip.integration.tests}</skipITs>
                </configuration>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                        <configuration>
                            <includes>
                                <include>**/it/**</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>glassfish-local-deployer</id>
            <properties>
                <cargo.hostname>localhost</cargo.hostname>
                <cargo.servlet.port>8080</cargo.servlet.port>
                <cargo.glassfish.admin.port>4848</cargo.glassfish.admin.port>
                <cargo.zipUrlInstaller.downloadDir>${project.build.directory}/../installs
                </cargo.zipUrlInstaller.downloadDir>
                <glassfish.domainDir>
                    ${project.build.directory}/glassfish-${glassfish.version}/glassfish6/glassfish/domains/domain1
                </glassfish.domainDir>
            </properties>

            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven3-plugin</artifactId>
                        <configuration>
                            <container>
                                <containerId>glassfish5x</containerId>
                                <zipUrlInstaller>
                                    <url>
                                        https://download.eclipse.org/ee4j/glassfish/glassfish-${glassfish.version}.zip
                                    </url>
                                    <downloadDir>${cargo.zipUrlInstaller.downloadDir}</downloadDir>
                                    <extractDir>${project.build.directory}</extractDir>
                                </zipUrlInstaller>
                                <!-- or use artifactInstaller-->
                                <!--<artifactInstaller>
                                    <groupId>org.glassfish.main.distributions</groupId>
                                    <artifactId>glassfish</artifactId>
                                    <version>${glassfish.version}</version>
                                </artifactInstaller>-->
                                <!-- Payara server example -->
                                <!--<container>
                                         <containerId>payara</containerId>
                                         <artifactInstaller>
                                             <groupId>fish.payara.distributions</groupId>
                                             <artifactId>payara</artifactId>
                                             <version>${payara.version}</version>
                                         </artifactInstaller>
                                     </container>-->
                            </container>
                            <configuration>
                                <!-- the configuration used to deploy -->
                                <!--<home>${project.build.directory}/glassfish6x-home</home>-->
                                <home>${glassfish.domainDir}</home>
                                <properties>
                                    <cargo.hostname>${cargo.hostname}</cargo.hostname>
                                    <cargo.servlet.port>${cargo.servlet.port}</cargo.servlet.port>
                                    <cargo.glassfish.admin.port>${cargo.glassfish.admin.port}
                                    </cargo.glassfish.admin.port>
                                    <cargo.remote.username>admin</cargo.remote.username>
                                    <cargo.remote.password></cargo.remote.password>
                                </properties>
                            </configuration>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>glassfish-standalone</id>
            <properties>
                <glassfish.home>${project.build.directory}/glassfish6</glassfish.home>
            </properties>

            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>unpack</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>org.glassfish.main.distributions</groupId>
                                            <artifactId>glassfish</artifactId>
                                            <version>${glassfish.version}</version>
                                            <type>zip</type>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${project.build.directory}</outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven3-plugin</artifactId>
                        <configuration>
                            <container>
                                <containerId>glassfish5x</containerId>
                                <type>installed</type>
                                <home>${glassfish.home}</home>
                            </container>
                            <configuration>
                                <type>standalone</type>
                                <properties>
                                    <cargo.remote.password></cargo.remote.password>
                                </properties>
                            </configuration>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>glassfish-existing</id>
            <properties>
                <glassfish.home>${project.build.directory}/glassfish6</glassfish.home>
                <glassfish.domainDir>${glassfish.home}/glassfish/domains</glassfish.domainDir>
                <glassfish.domainName>domain1</glassfish.domainName>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>unpack</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>org.glassfish.main.distributions</groupId>
                                            <artifactId>glassfish</artifactId>
                                            <version>${glassfish.version}</version>
                                            <type>zip</type>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${project.build.directory}</outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven3-plugin</artifactId>
                        <configuration>
                            <container>
                                <containerId>glassfish5x</containerId>
                                <type>installed</type>
                                <home>${glassfish.home}</home>
                            </container>
                            <configuration>
                                <type>existing</type>
                                <home>${glassfish.domainDir}</home>
                                <properties>
                                    <cargo.glassfish.domain.name>${glassfish.domainName}</cargo.glassfish.domain.name>
                                    <cargo.remote.password></cargo.remote.password>
                                </properties>
                            </configuration>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>glassfish-remote</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven3-plugin</artifactId>
                        <configuration>
                            <container>
                                <containerId>glassfish5x</containerId>
                                <type>remote</type>
                            </container>
                            <configuration>
                                <type>runtime</type>
                                <properties>
                                    <cargo.remote.username>admin</cargo.remote.username>
                                    <cargo.remote.password></cargo.remote.password>
                                    <cargo.glassfish.admin.port>4848</cargo.glassfish.admin.port>
                                    <cargo.hostname>localhost</cargo.hostname>
                                </properties>
                            </configuration>
                        </configuration>
                        <!-- provides JSR88 client API to deploy on Glassfish/Payara Server -->
                        <!-- WARNING: deployment client is not available in Glassfish v6.0 -->
                        <dependencies>
                            <dependency>
                                <groupId>org.glassfish.main.deployment</groupId>
                                <artifactId>deployment-client</artifactId>
                                <version>5.1.0</version>
                                <!--<version>${glassfish.version}</version>-->
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>payara-local</id>
            <properties>
                <glassfish.home>${project.build.directory}/payara6</glassfish.home>

                <!-- for the existing configuration -->
                <glassfish.domainDir>${glassfish.home}/glassfish/domains</glassfish.domainDir>
                <glassfish.domainName>domain1</glassfish.domainName>
            </properties>

            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>unpack</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>fish.payara.distributions</groupId>
                                            <artifactId>payara</artifactId>
                                            <version>${payara.version}</version>
                                            <type>zip</type>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${project.build.directory}</outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven3-plugin</artifactId>
                        <configuration>
                            <container>
                                <containerId>payara</containerId>
                                <type>installed</type>
                                <home>${glassfish.home}</home>
                            </container>
                            <configuration>
                                <type>standalone</type>
                                <properties>
                                    <cargo.remote.password></cargo.remote.password>
                                </properties>
                            </configuration>
                            <!-- reuse the existing configuration  -->
                            <!--<configuration>
                                <type>existing</type>
                                <home>${glassfish.domainDir}</home>
                                <properties>
                                    <cargo.glassfish.domain.name>${glassfish.domainName}</cargo.glassfish.domain.name>
                                    <cargo.remote.password></cargo.remote.password>
                                </properties>
                            </configuration>-->
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>payara-remote</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven3-plugin</artifactId>
                        <configuration>
                            <container>
                                <containerId>payara</containerId>
                                <type>remote</type>
                            </container>
                            <configuration>
                                <type>runtime</type>
                                <properties>
                                    <cargo.remote.username>admin</cargo.remote.username>
                                    <cargo.remote.password></cargo.remote.password>
                                    <cargo.glassfish.admin.port>4848</cargo.glassfish.admin.port>
                                    <cargo.hostname>localhost</cargo.hostname>
                                </properties>
                            </configuration>
                        </configuration>
                        <!-- provides JSR88 client API to deploy on Glassfish/Payara Server -->
                        <!-- WARNING: deployment client is not available in Glassfish v6.0 -->
                        <dependencies>
                            <dependency>
                                <groupId>org.glassfish.main.deployment</groupId>
                                <artifactId>deployment-client</artifactId>
                                <version>5.1.0</version>
                            </dependency>
                            <!-- jaxb is required when using Java 11 with cargo maven plugin -->
                            <dependency>
                                <groupId>org.glassfish.jaxb</groupId>
                                <artifactId>jaxb-runtime</artifactId>
                                <version>2.3.5</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>wildfly</id>
            <build>
                <plugins>
                    <!-- The WildFly plugin deploys your war to a local running WildFly container -->
                    <!-- To use, run: mvn package wildfly:deploy -->
                    <!-- For Jakarta EE 9, use `wildfly-preview-dist` as artifactId instead to start and deploy applications-->
                    <!-- Run: mvn clean wildfly:run -PWildfly -Dwildfly.artifactId=wildfly-preview-dist -Dwildfly.version=22.0.0.Alpha1 -->
                    <!-- or set the `jboss-as.home` to run: mvn clean wildfly:run -PWildfly -Djboss-as.home=D:\appsvr\wildfly-preview-22.0.0.Alpha1-->
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <version>${wildfly-maven-plugin.version}</version>
                        <configuration>
                            <!-- if a jboss-as.home or jboss.home property is not present, firstly it will download
                            a copy of wildfly distribution automatically -->
                            <!-- <jossHome>${env.WILDFLY_HOME}</jbossHome>-->
                            <!--<jbossHome>D:\appsvr\wildfly-preview-22.0.0.Alpha1</jbossHome>-->

                            <!-- To deploy a running wildfly server -->
                            <!-- <hostname></hostname>
                            <port></port>
                            <username></username>
                            <password></password> -->

                            <!-- or set a wildfly.id property to add a server in settings.xml -->
                            <!--<id>wildfly-svr</id> -->

                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>wildfly-bootable</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-jar-maven-plugin</artifactId>
                        <version>${wildfly-jar-maven-plugin.version}</version>
                        <configuration>
                            <feature-pack-location>
                                wildfly-preview@maven(org.jboss.universe:community-universe)#${wildfly.version}
                            </feature-pack-location>
                            <layers>
                                <layer>jaxrs</layer>
                            </layers>
                            <plugin-options>
                                <jboss-fork-embedded>true</jboss-fork-embedded>
                            </plugin-options>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>package</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>wildfly-openshift</id>
            <properties>
                <jkube.generator.from>registry.redhat.io/ubi8/openjdk-11:latest</jkube.generator.from>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-jar-maven-plugin</artifactId>
                        <version>${wildfly-jar-maven-plugin.version}</version>
                        <configuration>
                            <feature-pack-location>
                                wildfly-preview@maven(org.jboss.universe:community-universe)#${wildfly.version}
                            </feature-pack-location>
                            <layers>
                                <layer>cloud-server</layer>
                            </layers>
                            <excluded-layers>
                                <layer>deployment-scanner</layer>
                            </excluded-layers>
                            <cloud/>
                            <plugin-options>
                                <jboss-fork-embedded>true</jboss-fork-embedded>
                            </plugin-options>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>package</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.eclipse.jkube</groupId>
                        <artifactId>openshift-maven-plugin</artifactId>
                        <version>${openshift-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>resource</goal>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <enricher>
                                <config>
                                    <jkube-service>
                                        <type>NodePort</type>
                                    </jkube-service>
                                </config>
                            </enricher>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>openliberty</id>
            <!-- Use the following command to start and deploy applications to a `pre-existing` OpenLiberty beta -->
            <!-- mvn clean package liberty:start liberty:deploy -Popenliberty-->

            <!-- Note: the `liberty:run` goal will clean the server in the `/target` folder automatically. -->
            <!-- Use this command to create a OpenLiberty server from scratch and deploy the applications to it -->
            <!-- mvn clean liberty:create package liberty:deploy -Popenliberty-->
            <build>
                <plugins>
                    <!--<plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>${maven-dependency-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>default-unpack</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>io.openliberty.beta</groupId>
                                            <artifactId>openliberty-jakartaee9</artifactId>
                                            <version>${liberty.runtime.version}</version>
                                            <type>zip</type>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${project.build.directory}/liberty
                                            </outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                            <execution>
                                <id>default-copy</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>org.apache.derby</groupId>
                                            <artifactId>derby</artifactId>
                                            <version>${derby.version}</version>
                                            <type>jar</type>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${project.build.directory}/liberty/wlp/usr/shared/resources
                                            </outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>-->
                    <!-- Enable liberty-maven-plugin -->
                    <plugin>
                        <groupId>io.openliberty.tools</groupId>
                        <artifactId>liberty-maven-plugin</artifactId>
                        <version>${liberty-maven-plugin.version}</version>
                        <configuration>
                            <runtimeArtifact>
                                <groupId>io.openliberty.beta</groupId>
                                <artifactId>openliberty-jakartaee9</artifactId>
                                <version>${liberty.runtime.version}</version>
                            </runtimeArtifact>
                            <!--<installDirectory>D:/appsvr/wlp</installDirectory>-->
                            <!--<installDirectory>${project.build.directory}/liberty/wlp</installDirectory>-->
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>tomee-local</id>
            <properties>
                <tomee.home>${project.build.directory}/apache-tomee-plume-${tomee.version}</tomee.home>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>unpack</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>org.apache.tomee.jakarta</groupId>
                                            <artifactId>apache-tomee</artifactId>
                                            <version>${tomee.version}</version>
                                            <classifier>plume</classifier>
                                            <type>zip</type>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${project.build.directory}</outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven3-plugin</artifactId>
                        <configuration>
                            <container>
                                <containerId>tomee9x</containerId>
                                <type>installed</type>
                                <home>${tomee.home}</home>
                            </container>
                            <configuration>
                                <type>standalone</type>
                                <properties>
                                </properties>
                            </configuration>
                            <!-- reuse the existing configuration  -->
                            <!--<configuration>
                                <type>existing</type>
                                <home>${tomee.home}</home>
                                <properties>
                                </properties>
                            </configuration>-->
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>tomee-remote</id>
            <!-- Add `manager-script` role to the tomee user in tomee/conf/tomcat-users.xml -->
            <!-- Run `mvn clean cargo:deploy -Ptomee-remote` to the running TomEE-->
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven3-plugin</artifactId>
                        <configuration>
                            <container>
                                <containerId>tomee9x</containerId>
                                <type>remote</type>
                            </container>
                            <configuration>
                                <type>runtime</type>
                                <properties>
                                    <cargo.remote.username>tomee</cargo.remote.username>
                                    <cargo.remote.password>tomee</cargo.remote.password>
                                </properties>
                            </configuration>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>tomee</id>
            <!-- Run: mvn clean package tomee:run -Ptomee to deploy applications -->
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.tomee.maven</groupId>
                        <artifactId>tomee-maven-plugin</artifactId>
                        <version>${tomee-maven-plugin.version}</version>
                        <configuration>
                            <path>/</path>
                            <!-- Apache TomeEE runtime instance -->
                            <!-- <catalinaBase>${project.build.directory}/apache-tomee</catalinaBase>-->

                            <!-- download and run on a managed Apache TomEE server -->
                            <tomeeVersion>${tomee.version}</tomeeVersion>
                            <tomeeArtifactId>apache-tomee</tomeeArtifactId>

                            <!-- Note: TomEE 9 use the new groupId: org.apache.tomee.jakarta -->
                            <tomeeGroupId>org.apache.tomee.jakarta</tomeeGroupId>
                            <tomeeClassifier>plume</tomeeClassifier>

                            <!-- Config for remote deployment to a running server -->
                            <!--
                            <tomeeHost>localhost</tomeeHost>
                            <user>tomee</user>
                            <password>tomee</password>
                            <path>${project.build.directory}/${project.build.finalName}.war</path>
                            -->
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>unit-test</id>
            <properties>
                <skip.unit.tests>false</skip.unit.tests>
                <skip.integration.tests>true</skip.integration.tests>
            </properties>
        </profile>
        <profile>
            <id>coverage</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <version>${jacoco-maven-plugin.version}</version>
                        <configuration>
                            <excludes>
                                <!-- excludes the resources not to calculated in coverage report-->
                                <exclude>**/*Resource.*</exclude>
                            </excludes>
                        </configuration>
                        <executions>
                            <execution>
                                <id>default-prepare-agent</id>
                                <goals>
                                    <goal>prepare-agent</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>default-report</id>
                                <goals>
                                    <goal>report</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>default-check</id>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                                <configuration>
                                    <rules>
                                        <rule>
                                            <element>BUNDLE</element>
                                            <limits>
                                                <limit>
                                                    <counter>COMPLEXITY</counter>
                                                    <value>COVEREDRATIO</value>
                                                    <minimum>0.60</minimum>
                                                </limit>
                                            </limits>
                                        </rule>
                                    </rules>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>arq-weld</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>org.jboss.arquillian.container</groupId>
                    <artifactId>arquillian-weld-embedded</artifactId>
                    <version>${arquillian-weld-embedded.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.jboss.weld</groupId>
                    <artifactId>weld-core-impl</artifactId>
                    <version>${weld.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <testResources>
                    <testResource>
                        <directory>src/test/arq-weld</directory>
                    </testResource>
                </testResources>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven-failsafe-plugin.version}</version>
                        <configuration>
                            <systemPropertyVariables>
                                <arquillian.launch>arq-weld</arquillian.launch>
                            </systemPropertyVariables>
                            <excludes>
                                <exclude>**/it/GreetingResourceTest*</exclude>
                            </excludes>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>arq-glassfish-remote</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
            <dependencies>
                <!-- Jersey -->
                <dependency>
                    <groupId>org.glassfish.jersey.media</groupId>
                    <artifactId>jersey-media-sse</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.media</groupId>
                    <artifactId>jersey-media-json-binding</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.inject</groupId>
                    <artifactId>jersey-hk2</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>

                <dependency>
                    <groupId>org.glassfish.jersey.core</groupId>
                    <artifactId>jersey-client</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>

                <!-- WebSocket client dependencies -->
                <!--<dependency>
                    <groupId>org.glassfish.tyrus</groupId>
                    <artifactId>tyrus-client</artifactId>
                    <version>1.13.1</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.tyrus</groupId>
                    <artifactId>tyrus-container-grizzly-client</artifactId>
                    <version>1.13.1</version>
                    <scope>test</scope>
                </dependency>-->

                <dependency>
                    <groupId>org.jboss.arquillian.container</groupId>
                    <artifactId>arquillian-glassfish-remote-6</artifactId>
                    <version>${arquillian-glassfish6.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <testResources>
                    <testResource>
                        <directory>src/test/arq-glassfish-remote</directory>
                    </testResource>
                </testResources>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven-failsafe-plugin.version}</version>
                        <configuration>
                            <systemPropertyVariables>
                                <arquillian.launch>glassfish-remote</arquillian.launch>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>arq-glassfish-managed</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>

            <dependencies>
                <!-- Jersey -->
                <dependency>
                    <groupId>org.glassfish.jersey.media</groupId>
                    <artifactId>jersey-media-sse</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.media</groupId>
                    <artifactId>jersey-media-json-binding</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.inject</groupId>
                    <artifactId>jersey-hk2</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>

                <dependency>
                    <groupId>org.glassfish.jersey.core</groupId>
                    <artifactId>jersey-client</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>

                <!-- WebSocket client dependencies -->
                <!--<dependency>
                    <groupId>org.glassfish.tyrus</groupId>
                    <artifactId>tyrus-client</artifactId>
                    <version>1.13.1</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.tyrus</groupId>
                    <artifactId>tyrus-container-grizzly-client</artifactId>
                    <version>1.13.1</version>
                    <scope>test</scope>
                </dependency>-->
                <dependency>
                    <groupId>org.jboss.arquillian.container</groupId>
                    <artifactId>arquillian-glassfish-managed-6</artifactId>
                    <version>${arquillian-glassfish6.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <testResources>
                    <testResource>
                        <directory>src/test/arq-glassfish-managed</directory>
                    </testResource>
                </testResources>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>${maven-dependency-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>unpack</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>org.glassfish.main.distributions</groupId>
                                            <artifactId>glassfish</artifactId>
                                            <version>${glassfish.version}</version>
                                            <type>zip</type>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${project.build.directory}</outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven-failsafe-plugin.version}</version>
                        <configuration>
                            <environmentVariables>
                                <GLASSFISH_HOME>${project.build.directory}/glassfish6</GLASSFISH_HOME>
                            </environmentVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>arq-payara-embedded</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>fish.payara.extras</groupId>
                    <artifactId>payara-embedded-all</artifactId>
                    <version>${payara.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>arquillian-payara-server-embedded</artifactId>
                    <version>${arquillian-payara.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>

        <profile>
            <id>arq-payara-managed</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
            <dependencies>

                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>payara-client-ee9</artifactId>
                    <version>${arquillian-payara.version}</version>
                    <scope>test</scope>
                </dependency>
                <!-- Payara Server Container adaptor -->
                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>arquillian-payara-server-managed</artifactId>
                    <version>${arquillian-payara.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <testResources>
                    <testResource>
                        <directory>src/test/arq-payara-managed</directory>
                    </testResource>
                </testResources>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>${maven-dependency-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>unpack</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>fish.payara.distributions</groupId>
                                            <artifactId>payara</artifactId>
                                            <version>${payara.version}</version>
                                            <type>zip</type>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${project.build.directory}</outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven-failsafe-plugin.version}</version>
                        <configuration>
                            <systemPropertyVariables>
                                <payara.home>${project.build.directory}/payara6</payara.home>
                                <arquillian.launch>payara-managed</arquillian.launch>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>arq-payara-remote</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>payara-client-ee9</artifactId>
                    <version>${arquillian-payara.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>arquillian-payara-server-remote</artifactId>
                    <version>${arquillian-payara.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <testResources>
                    <testResource>
                        <directory>src/test/arq-payara-remote</directory>
                    </testResource>
                </testResources>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven-failsafe-plugin.version}</version>
                        <configuration>
                            <!-- This needs tuning -->
                            <systemPropertyVariables>
                                <arquillian.launch>payara-remote</arquillian.launch>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>arq-payara-micro</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
            <dependencies>

                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>payara-client-ee9</artifactId>
                    <version>${arquillian-payara.version}</version>
                    <scope>test</scope>
                </dependency>

                <!-- Payara Micro Managed Container Adaptor -->
                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>arquillian-payara-micro-managed</artifactId>
                    <version>${arquillian-payara.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>${maven-dependency-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>unpack</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>fish.payara.extras</groupId>
                                            <artifactId>payara-micro</artifactId>
                                            <version>${payara.version}</version>
                                            <type>jar</type>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${project.build.directory}</outputDirectory>
                                            <destFileName>payara-micro.jar</destFileName>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven-failsafe-plugin.version}</version>
                        <configuration>
                            <systemPropertyVariables>
                                <payara.microJar>${project.build.directory}/payara-micro.jar</payara.microJar>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- Run with: mvn clean verify -Parq-liberty-managed -->
            <id>arq-liberty-managed</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>io.openliberty.arquillian</groupId>
                    <artifactId>arquillian-liberty-managed-jakarta</artifactId>
                    <version>${arquillian-liberty-jakarta.version}</version>
                </dependency>
                <!--It seems OpenLiberty 21.0.0.1 beta switched to use Resteasy as Jakarta Restful WS provider.
                But there is no official public version for Jakarta EE 9 in the Maven central repository.
                Use Jersey Client in the test codes here.-->

                <dependency>
                    <groupId>org.glassfish.jersey.media</groupId>
                    <artifactId>jersey-media-json-binding</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.inject</groupId>
                    <artifactId>jersey-hk2</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>

                <dependency>
                    <groupId>org.glassfish.jersey.core</groupId>
                    <artifactId>jersey-client</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <testResources>
                    <testResource>
                        <directory>src/test/arq-liberty-managed</directory>
                        <includes>
                            <include>*</include>
                        </includes>
                        <excludes>
                            <exclude>server.xml</exclude>
                        </excludes>
                    </testResource>
                    <testResource>
                        <directory>src/test/arq-liberty-managed</directory>
                        <includes>
                            <include>server.xml</include>
                        </includes>
                        <targetPath>
                            ${project.build.directory}/wlp/usr/servers/defaultServer
                        </targetPath>
                    </testResource>
                </testResources>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>${maven-dependency-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>unpack</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>io.openliberty.beta</groupId>
                                            <artifactId>openliberty-runtime</artifactId>
                                            <version>${liberty.runtime.version}</version>
                                            <type>zip</type>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${project.build.directory}</outputDirectory>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>io.openliberty.arquillian</groupId>
                                            <artifactId>arquillian-liberty-support-jakarta</artifactId>
                                            <version>${arquillian-liberty-jakarta.version}</version>
                                            <type>zip</type>
                                            <classifier>feature</classifier>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${project.build.directory}/wlp/usr</outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven-failsafe-plugin.version}</version>
                        <configuration>
                            <environmentVariables>
                                <!-- WLP_HOME is not picked by arquillian liberty -->
                                <!--<WLP_HOME>${project.build.directory}/wlp</WLP_HOME>-->
                            </environmentVariables>
                            <systemPropertyVariables>
                                <arquillian.launch>liberty-managed</arquillian.launch>
                                <java.util.logging.config.file>${project.build.testOutputDirectory}/logging.properties
                                </java.util.logging.config.file>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- Run with: mvn clean verify -Parq-liberty-remote -->
            <id>arq-liberty-remote</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>io.openliberty.arquillian</groupId>
                    <artifactId>arquillian-liberty-remote-jakarta</artifactId>
                    <version>${arquillian-liberty-jakarta.version}</version>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.media</groupId>
                    <artifactId>jersey-media-json-binding</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.inject</groupId>
                    <artifactId>jersey-hk2</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>

                <dependency>
                    <groupId>org.glassfish.jersey.core</groupId>
                    <artifactId>jersey-client</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <testResources>
                    <testResource>
                        <directory>src/test/arq-liberty-remote</directory>
                        <includes>
                            <include>*</include>
                        </includes>
                        <excludes>
                            <exclude>server.xml</exclude>
                        </excludes>
                    </testResource>
                </testResources>
                <plugins>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven-failsafe-plugin.version}</version>
                        <configuration>
                            <systemPropertyVariables>
                                <arquillian.launch>liberty-remote</arquillian.launch>
                                <java.util.logging.config.file>${project.build.testOutputDirectory}/logging.properties
                                </java.util.logging.config.file>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>

            <!-- An optional Arquillian testing profile that executes tests in your
                WildFly instance -->
            <!-- This profile will start a new WildFly instance, and execute the test,
                shutting it down when done -->
            <!-- Run with: mvn clean verify -Parq-wildfly-managed -->
            <id>arq-wildfly-managed</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
                <serverProfile>standalone-full.xml</serverProfile>
                <serverRoot>${project.build.directory}/wildfly-${wildfly.version}</serverRoot>
            </properties>
            <dependencies>
                <!--<dependency>
                    <groupId>io.undertow</groupId>
                    <artifactId>undertow-websockets-jsr</artifactId>
                    <version>${undertow-websockets-jsr.version}</version>
                    <scope>test</scope>
                </dependency>-->

                <!-- TESTS -->
                <!-- JAXRS test need the dependency:resteasy-client -->
                <!-- Import the RestEasy Client and jackson2/json-binding/json-p provider, we use test scope
                    as we need that for test purposes -->
                <!--<dependency>
                    <groupId>org.jboss.resteasy</groupId>
                    <artifactId>resteasy-client</artifactId>
                    <version>${resteasy.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.jboss.resteasy</groupId>
                    <artifactId>resteasy-jackson2-provider</artifactId>
                    <version>${resteasy.version}</version>
                    <scope>test</scope>
                </dependency>-->

                <!-- use Jersey client instead -->
                <dependency>
                    <groupId>org.glassfish.jersey.media</groupId>
                    <artifactId>jersey-media-json-binding</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.inject</groupId>
                    <artifactId>jersey-hk2</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.core</groupId>
                    <artifactId>jersey-client</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-container-managed</artifactId>
                    <version>${wildfly-arquillian.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>

            <build>
                <testResources>
                    <testResource>
                        <directory>src/test/arq-wildfly-managed</directory>
                        <includes>
                            <include>*</include>
                        </includes>
                    </testResource>
                </testResources>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>${maven-dependency-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>unpack</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>org.wildfly</groupId>
                                            <artifactId>wildfly-preview-dist</artifactId>
                                            <version>${wildfly.version}</version>
                                            <type>zip</type>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${project.build.directory}</outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven-failsafe-plugin.version}</version>
                        <configuration>
                            <environmentVariables>
                                <JBOSS_HOME>${project.build.directory}/wildfly-preview-${wildfly.version}</JBOSS_HOME>
                            </environmentVariables>
                            <systemPropertyVariables>
                                <arquillian.launch>wildfly-managed</arquillian.launch>
                                <serverConfig>standalone-full.xml</serverConfig>
                                <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- An optional Arquillian testing profile that executes tests in a remote
                WildFly instance -->
            <!-- Run with: mvn clean test -Parq-wildfly-remote -->
            <id>arq-wildfly-remote</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
            <dependencies>
                <!--<dependency>
                    <groupId>org.jboss.resteasy</groupId>
                    <artifactId>resteasy-client</artifactId>
                    <version>${resteasy.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.jboss.resteasy</groupId>
                    <artifactId>resteasy-jackson2-provider</artifactId>
                    <version>${resteasy.version}</version>
                    <scope>test</scope>
                </dependency>-->
                <!-- use Jersey client instead -->
                <dependency>
                    <groupId>org.glassfish.jersey.media</groupId>
                    <artifactId>jersey-media-json-binding</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.inject</groupId>
                    <artifactId>jersey-hk2</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.core</groupId>
                    <artifactId>jersey-client</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>

                <dependency>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-container-remote</artifactId>
                    <version>${wildfly-arquillian.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <testResources>
                    <testResource>
                        <directory>src/test/arq-wildfly-remote</directory>
                        <includes>
                            <include>*</include>
                        </includes>
                    </testResource>
                </testResources>
                <plugins>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven-failsafe-plugin.version}</version>
                        <configuration>
                            <systemPropertyVariables>
                                <arquillian.launch>wildfly-remote</arquillian.launch>
                                <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- An optional Arquillian testing profile that executes tests in your
                WildFly instance -->
            <!-- Run with: mvn clean test -Parq-wildfly-embedded -->
            <id>arq-wildfly-embedded</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
            <dependencies>
                <!--<dependency>
                    <groupId>org.jboss.resteasy</groupId>
                    <artifactId>resteasy-client</artifactId>
                    <version>${resteasy.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.jboss.resteasy</groupId>
                    <artifactId>resteasy-jackson2-provider</artifactId>
                    <version>${resteasy.version}</version>
                    <scope>test</scope>
                </dependency>-->
                <!-- use Jersey client instead -->
                <dependency>
                    <groupId>org.glassfish.jersey.media</groupId>
                    <artifactId>jersey-media-json-binding</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.inject</groupId>
                    <artifactId>jersey-hk2</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.core</groupId>
                    <artifactId>jersey-client</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>

                <dependency>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-container-embedded</artifactId>
                    <version>${wildfly-arquillian.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <testResources>
                    <testResource>
                        <directory>src/test/arq-wildfly-embedded</directory>
                        <includes>
                            <include>*</include>
                        </includes>
                    </testResource>
                </testResources>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>${maven-dependency-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>unpack</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>org.wildfly</groupId>
                                            <artifactId>wildfly-preview-dist</artifactId>
                                            <version>${wildfly.version}</version>
                                            <type>zip</type>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${project.build.directory}</outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven-failsafe-plugin.version}</version>
                        <configuration>
                            <environmentVariables>
                                <JBOSS_HOME>${project.build.directory}/wildfly-preview-${wildfly.version}</JBOSS_HOME>
                            </environmentVariables>
                            <systemPropertyVariables>
                                <arquillian.launch>wildfly-embedded</arquillian.launch>
                                <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- An optional Arquillian testing profile that executes tests on a bootable FAT jar -->
            <!-- Run with: mvn clean test -Parq-wildfly-bootable-jar -->
            <id>arq-wildfly-bootable-jar</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
            <dependencies>
                <!--<dependency>
                    <groupId>org.jboss.resteasy</groupId>
                    <artifactId>resteasy-client</artifactId>
                    <version>${resteasy.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.jboss.resteasy</groupId>
                    <artifactId>resteasy-jackson2-provider</artifactId>
                    <version>${resteasy.version}</version>
                    <scope>test</scope>
                </dependency>-->
                <!-- use Jersey client instead -->
                <dependency>
                    <groupId>org.glassfish.jersey.media</groupId>
                    <artifactId>jersey-media-json-binding</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.inject</groupId>
                    <artifactId>jersey-hk2</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.core</groupId>
                    <artifactId>jersey-client</artifactId>
                    <version>${jersey.version}</version>
                    <scope>test</scope>
                </dependency>

                <dependency>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-container-bootable</artifactId>
                    <version>${wildfly-arquillian.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <testResources>
                    <testResource>
                        <directory>src/test/arq-wildfly-bootable-jar</directory>
                        <includes>
                            <include>*</include>
                        </includes>
                    </testResource>
                </testResources>
                <plugins>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-jar-maven-plugin</artifactId>
                        <version>${wildfly-jar-maven-plugin.version}</version>
                        <configuration>
                            <feature-pack-location>
                                wildfly-preview@maven(org.jboss.universe:community-universe)#${wildfly.version}
                            </feature-pack-location>
                            <layers>
                                <layer>jaxrs</layer>
                                <layer>management</layer>
                            </layers>
                            <excluded-layers>
                                <layer>deployment-scanner</layer>
                            </excluded-layers>
                            <plugin-options>
                                <jboss-fork-embedded>true</jboss-fork-embedded>
                            </plugin-options>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>package</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven-failsafe-plugin.version}</version>
                        <configuration>
                            <systemPropertyVariables>
                                <bootable.jar>${project.build.directory}/${project.artifactId}-bootable.jar
                                </bootable.jar>
                                <arquillian.launch>wildfly-bootable-jar</arquillian.launch>
                                <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>${maven-surefire-report-plugin.version}</version>
            </plugin>
        </plugins>
    </reporting>
    <repositories>
        <repository>
            <id>sonatype-nexus-staging</id>
            <name>Sonatype Nexus Staging</name>
            <url>https://jakarta.oss.sonatype.org/content/repositories/staging/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>payara-nexus</id>
            <name>Payara Nexus Artifacts</name>
            <url>https://nexus.payara.fish/repository/payara-artifacts/</url>
        </repository>
    </repositories>
    <issueManagement>
        <system>Github Issues</system>
        <url>https://github.com/hantsy/jakartaee9-starter-boilerplate/issues</url>
    </issueManagement>
    <ciManagement>
        <system>Github Actions</system>
        <url>https://github.com/hantsy/jakartaee9-starter-boilerplate/actions</url>
    </ciManagement>
    <scm>
        <url>https://github.com/hantsy/jakartaee9-starter-boilerplate</url>
        <connection>scm:git:https://github.com/hantsy/jakartaee9-starter-boilerplate</connection>
        <developerConnection>scm:git:https://github.com/hantsy/jakartaee9-starter-boilerplate</developerConnection>
    </scm>
</project>
